# =====================================================
# CLONAGE AUTOMATIS√â PROD ‚Üí TEST/DEV (Windows PowerShell)
# =====================================================
# Script principal pour cloner PROD vers un environnement

param(
    [string]$TargetEnv = "test",
    [string]$ProdHost = "localhost",
    [string]$ProdDB = "loft_prod", 
    [string]$ProdUser = "postgres",
    [string]$TargetHost = "localhost",
    [string]$TargetUser = "postgres"
)

$TargetDB = "loft_$TargetEnv"
$BackupDir = ".\backups"
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

Write-Host "üöÄ D√âBUT DU CLONAGE PROD ‚Üí $($TargetEnv.ToUpper())" -ForegroundColor Green
Write-Host "=================================================="
Write-Host "Source: $ProdHost/$ProdDB"
Write-Host "Cible: $TargetHost/$TargetDB"
Write-Host "Timestamp: $Timestamp"
Write-Host ""

# Cr√©er le dossier de sauvegarde
if (!(Test-Path $BackupDir)) {
    New-Item -ItemType Directory -Path $BackupDir | Out-Null
}

try {
    # √âTAPE 1: Sauvegarde de s√©curit√©
    Write-Host "üì¶ √âTAPE 1: Sauvegarde de s√©curit√© de $($TargetEnv.ToUpper())..." -ForegroundColor Yellow
    $BackupFile = "$BackupDir\${TargetEnv}_backup_${Timestamp}.sql"
    & pg_dump -h $TargetHost -U $TargetUser -d $TargetDB --no-owner --no-privileges | Out-File -FilePath $BackupFile -Encoding UTF8
    Write-Host "‚úÖ Sauvegarde cr√©√©e: ${TargetEnv}_backup_${Timestamp}.sql" -ForegroundColor Green

    # √âTAPE 2: Export de la structure depuis PROD
    Write-Host "üì§ √âTAPE 2: Export de la structure depuis PROD..." -ForegroundColor Yellow
    $SchemaFile = "$BackupDir\prod_schema_${Timestamp}.sql"
    & pg_dump -h $ProdHost -U $ProdUser -d $ProdDB --schema-only --no-owner --no-privileges | Out-File -FilePath $SchemaFile -Encoding UTF8
    Write-Host "‚úÖ Structure export√©e" -ForegroundColor Green

    # √âTAPE 3: Export des donn√©es essentielles (sans donn√©es sensibles)
    Write-Host "üì§ √âTAPE 3: Export des donn√©es essentielles..." -ForegroundColor Yellow
    $DataFile = "$BackupDir\prod_data_${Timestamp}.sql"
    & pg_dump -h $ProdHost -U $ProdUser -d $ProdDB --data-only --no-owner --no-privileges --exclude-table=auth.users --exclude-table=auth.sessions --exclude-table=profiles | Out-File -FilePath $DataFile -Encoding UTF8
    Write-Host "‚úÖ Donn√©es essentielles export√©es (sans donn√©es sensibles)" -ForegroundColor Green

    # √âTAPE 4: Nettoyage de l'environnement cible
    Write-Host "üßπ √âTAPE 4: Nettoyage de $($TargetEnv.ToUpper())..." -ForegroundColor Yellow
    & psql -h $TargetHost -U $TargetUser -d $TargetDB -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"
    & psql -h $TargetHost -U $TargetUser -d $TargetDB -c "DROP SCHEMA IF EXISTS auth CASCADE;"
    Write-Host "‚úÖ Environnement nettoy√©" -ForegroundColor Green

    # √âTAPE 5: Import de la structure
    Write-Host "üì• √âTAPE 5: Import de la structure..." -ForegroundColor Yellow
    Get-Content $SchemaFile | & psql -h $TargetHost -U $TargetUser -d $TargetDB
    Write-Host "‚úÖ Structure import√©e" -ForegroundColor Green

    # √âTAPE 6: Import des donn√©es essentielles
    Write-Host "üì• √âTAPE 6: Import des donn√©es essentielles..." -ForegroundColor Yellow
    Get-Content $DataFile | & psql -h $TargetHost -U $TargetUser -d $TargetDB
    Write-Host "‚úÖ Donn√©es import√©es" -ForegroundColor Green

    # √âTAPE 7: Post-traitement (utilisateurs de test)
    Write-Host "üë• √âTAPE 7: Cr√©ation des utilisateurs de test..." -ForegroundColor Yellow
    Get-Content "scripts\create-test-users.sql" | & psql -h $TargetHost -U $TargetUser -d $TargetDB
    Write-Host "‚úÖ Utilisateurs de test cr√©√©s" -ForegroundColor Green

    # √âTAPE 8: V√©rification automatique
    Write-Host "üîç √âTAPE 8: V√©rification de la synchronisation..." -ForegroundColor Yellow
    $VerificationResult = & psql -h $TargetHost -U $TargetUser -d $TargetDB -t -c "SELECT json_build_object('profiles', (SELECT COUNT(*) FROM profiles), 'lofts', (SELECT COUNT(*) FROM lofts), 'users', (SELECT COUNT(*) FROM auth.users), 'transactions', (SELECT COUNT(*) FROM transactions));"
    
    Write-Host "üìä R√©sultats de v√©rification:" -ForegroundColor Cyan
    Write-Host $VerificationResult

    # √âTAPE 9: G√©n√©ration du rapport
    Write-Host "üìã √âTAPE 9: G√©n√©ration du rapport..." -ForegroundColor Yellow
    $ReportFile = "$BackupDir\clone_report_${Timestamp}.md"
    $ReportContent = @"
# Rapport de Clonage PROD ‚Üí $($TargetEnv.ToUpper())

**Date:** $(Get-Date)
**Environnement:** Windows PowerShell

## Environnements
- **Source:** $ProdHost/$ProdDB
- **Cible:** $TargetHost/$TargetDB

## Donn√©es clon√©es
$VerificationResult

## Fichiers g√©n√©r√©s
- Sauvegarde: ${TargetEnv}_backup_${Timestamp}.sql
- Structure: prod_schema_${Timestamp}.sql  
- Donn√©es: prod_data_${Timestamp}.sql
- Rapport: clone_report_${Timestamp}.md

## Utilisateurs de test cr√©√©s
- admin@test.local (Admin)
- manager@test.local (Manager)
- user@test.local (Utilisateur)
- Mot de passe: test123

## Status
‚úÖ Clonage r√©ussi - Environnement $($TargetEnv.ToUpper()) pr√™t pour le d√©veloppement
"@
    
    $ReportContent | Out-File -FilePath $ReportFile -Encoding UTF8
    Write-Host "‚úÖ Rapport g√©n√©r√©: clone_report_${Timestamp}.md" -ForegroundColor Green

    Write-Host ""
    Write-Host "üéâ CLONAGE TERMIN√â AVEC SUCC√àS!" -ForegroundColor Green
    Write-Host "=================================================="
    Write-Host "Environnement $($TargetEnv.ToUpper()) pr√™t pour le d√©veloppement"
    Write-Host "Rapport: $ReportFile"
    Write-Host ""
    Write-Host "üîê Connexion de test:" -ForegroundColor Cyan
    Write-Host "Email: admin@test.local"
    Write-Host "Mot de passe: test123"

} catch {
    Write-Host "‚ùå ERREUR DURANT LE CLONAGE:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}