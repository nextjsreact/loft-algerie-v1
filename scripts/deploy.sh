#!/bin/bash

# üöÄ Script de d√©ploiement pour Loft Alg√©rie
# D√©ploie l'application sur diff√©rents environnements

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Configuration
ENVIRONMENT=${1:-"development"}
BRANCH=$(git branch --show-current)
COMMIT_HASH=$(git rev-parse --short HEAD)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

print_status "üöÄ D√©ploiement Loft Alg√©rie"
echo "================================"
echo "Environnement: $ENVIRONMENT"
echo "Branche: $BRANCH"
echo "Commit: $COMMIT_HASH"
echo "Timestamp: $TIMESTAMP"
echo ""

# Validation de l'environnement
case $ENVIRONMENT in
    "development"|"dev")
        ENVIRONMENT="development"
        VERCEL_ENV="preview"
        ;;
    "staging"|"test")
        ENVIRONMENT="staging"
        VERCEL_ENV="preview"
        ;;
    "production"|"prod")
        ENVIRONMENT="production"
        VERCEL_ENV="production"
        ;;
    *)
        print_error "Environnement invalide: $ENVIRONMENT"
        echo "Environnements support√©s: development, staging, production"
        exit 1
        ;;
esac

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Vercel CLI
    if ! command -v vercel &> /dev/null; then
        print_warning "Vercel CLI n'est pas install√©"
        print_status "Installation de Vercel CLI..."
        npm install -g vercel
    fi
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        print_error "Git n'est pas install√©"
        exit 1
    fi
    
    print_success "Pr√©requis v√©rifi√©s"
}

# V√©rification de l'√©tat du repository
check_git_status() {
    print_status "V√©rification de l'√©tat Git..."
    
    # V√©rifier les modifications non commit√©es
    if [[ -n $(git status --porcelain) ]]; then
        print_warning "Des modifications non commit√©es d√©tect√©es"
        git status --short
        
        read -p "Continuer le d√©ploiement? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_error "D√©ploiement annul√©"
            exit 1
        fi
    fi
    
    # V√©rifier la branche pour la production
    if [[ $ENVIRONMENT == "production" && $BRANCH != "main" ]]; then
        print_error "La production ne peut √™tre d√©ploy√©e que depuis la branche 'main'"
        print_status "Branche actuelle: $BRANCH"
        exit 1
    fi
    
    print_success "√âtat Git v√©rifi√©"
}

# Installation des d√©pendances
install_dependencies() {
    print_status "Installation des d√©pendances..."
    
    if [[ -f "package-lock.json" ]]; then
        npm ci
    else
        npm install
    fi
    
    print_success "D√©pendances install√©es"
}

# Ex√©cution des tests
run_tests() {
    print_status "Ex√©cution des tests..."
    
    # Tests unitaires
    if npm run test > /dev/null 2>&1; then
        print_success "Tests unitaires r√©ussis"
    else
        print_error "√âchec des tests unitaires"
        
        if [[ $ENVIRONMENT == "production" ]]; then
            exit 1
        else
            read -p "Continuer malgr√© l'√©chec des tests? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    fi
    
    # Linting
    if npm run lint > /dev/null 2>&1; then
        print_success "Linting r√©ussi"
    else
        print_warning "Probl√®mes de linting d√©tect√©s"
        npm run lint || true
    fi
}

# Build de l'application
build_application() {
    print_status "Build de l'application..."
    
    # D√©finir les variables d'environnement pour le build
    export NODE_ENV="production"
    export NEXT_TELEMETRY_DISABLED=1
    
    if npm run build; then
        print_success "Build r√©ussi"
    else
        print_error "√âchec du build"
        exit 1
    fi
}

# D√©ploiement sur Vercel
deploy_to_vercel() {
    print_status "D√©ploiement sur Vercel..."
    
    # Configuration des arguments Vercel
    VERCEL_ARGS=""
    
    case $ENVIRONMENT in
        "production")
            VERCEL_ARGS="--prod"
            ;;
        "staging")
            VERCEL_ARGS="--target staging"
            ;;
        "development")
            VERCEL_ARGS="--target preview"
            ;;
    esac
    
    # D√©ploiement
    if DEPLOYMENT_URL=$(vercel deploy $VERCEL_ARGS --yes 2>/dev/null | tail -n 1); then
        print_success "D√©ploiement r√©ussi"
        echo "URL: $DEPLOYMENT_URL"
        
        # Sauvegarder l'URL de d√©ploiement
        echo "$DEPLOYMENT_URL" > ".deployment-url-${ENVIRONMENT}"
        
    else
        print_error "√âchec du d√©ploiement Vercel"
        exit 1
    fi
}

# V√©rification post-d√©ploiement
post_deployment_check() {
    print_status "V√©rification post-d√©ploiement..."
    
    if [[ -f ".deployment-url-${ENVIRONMENT}" ]]; then
        DEPLOYMENT_URL=$(cat ".deployment-url-${ENVIRONMENT}")
        
        # Attendre que le d√©ploiement soit pr√™t
        sleep 10
        
        # V√©rifier la sant√© de l'application
        if curl -f -s "$DEPLOYMENT_URL/api/health" > /dev/null 2>&1; then
            print_success "Application d√©ploy√©e et fonctionnelle"
        else
            print_warning "L'endpoint de sant√© n'est pas accessible"
            print_status "V√©rifiez manuellement: $DEPLOYMENT_URL"
        fi
        
        # V√©rifier la page d'accueil
        if curl -f -s "$DEPLOYMENT_URL" > /dev/null 2>&1; then
            print_success "Page d'accueil accessible"
        else
            print_warning "Page d'accueil non accessible"
        fi
    fi
}

# Notification de d√©ploiement
send_notification() {
    print_status "Envoi de notification..."
    
    # Cr√©er un tag Git pour les d√©ploiements en production
    if [[ $ENVIRONMENT == "production" ]]; then
        TAG_NAME="v${TIMESTAMP}"
        git tag -a "$TAG_NAME" -m "D√©ploiement production $TIMESTAMP"
        
        if git push origin "$TAG_NAME" 2>/dev/null; then
            print_success "Tag cr√©√©: $TAG_NAME"
        else
            print_warning "Impossible de pousser le tag"
        fi
    fi
    
    # Notification via script personnalis√© si disponible
    if [[ -f "scripts/notify-deployment.ts" ]]; then
        npm run notify:deployment-success 2>/dev/null || true
    fi
}

# Nettoyage
cleanup() {
    print_status "Nettoyage..."
    
    # Supprimer les fichiers temporaires
    rm -f ".deployment-url-${ENVIRONMENT}" 2>/dev/null || true
    
    print_success "Nettoyage termin√©"
}

# Fonction principale
main() {
    echo "üöÄ D√©but du d√©ploiement..."
    echo ""
    
    check_prerequisites
    check_git_status
    install_dependencies
    run_tests
    build_application
    deploy_to_vercel
    post_deployment_check
    send_notification
    cleanup
    
    echo ""
    print_success "üéâ D√©ploiement termin√© avec succ√®s!"
    echo ""
    print_status "R√©sum√©:"
    echo "- Environnement: $ENVIRONMENT"
    echo "- Branche: $BRANCH"
    echo "- Commit: $COMMIT_HASH"
    
    if [[ -f ".deployment-url-${ENVIRONMENT}" ]]; then
        DEPLOYMENT_URL=$(cat ".deployment-url-${ENVIRONMENT}")
        echo "- URL: $DEPLOYMENT_URL"
    fi
    
    echo ""
    print_status "Prochaines √©tapes:"
    echo "1. V√©rifiez l'application d√©ploy√©e"
    echo "2. Testez les fonctionnalit√©s critiques"
    echo "3. Surveillez les logs pour d√©tecter d'√©ventuels probl√®mes"
}

# Gestion des erreurs
trap 'print_error "Erreur lors du d√©ploiement"; cleanup; exit 1' ERR

# Ex√©cution du script principal
main "$@"