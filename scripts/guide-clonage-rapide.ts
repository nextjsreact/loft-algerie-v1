#!/usr/bin/env tsx
/**
 * GUIDE INTERACTIF DE CLONAGE RAPIDE
 * ==================================
 * 
 * Guide l'utilisateur pas √† pas pour cloner un environnement
 * Interface interactive pour simplifier le processus
 */

import { execSync } from 'child_process'
import { existsSync } from 'fs'

class CloneGuide {
  private async prompt(question: string): Promise<string> {
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })

    return new Promise(resolve => {
      rl.question(question, (answer: string) => {
        rl.close()
        resolve(answer.trim())
      })
    })
  }

  private async showWelcome(): Promise<void> {
    console.log('üöÄ GUIDE INTERACTIF DE CLONAGE D\'ENVIRONNEMENT')
    console.log('='.repeat(60))
    console.log('')
    console.log('Ce guide vous aidera √† cloner compl√®tement un environnement')
    console.log('de base de donn√©es vers un autre en quelques √©tapes simples.')
    console.log('')
    console.log('üìã Fonctionnalit√©s:')
    console.log('‚úÖ Clonage complet du sch√©ma et des donn√©es')
    console.log('‚úÖ Sauvegarde automatique avant clonage')
    console.log('‚úÖ Validation post-clonage')
    console.log('‚úÖ Instructions d√©taill√©es')
    console.log('')
  }

  private checkEnvironmentFiles(): { [key: string]: boolean } {
    return {
      prod: existsSync('.env.production'),
      test: existsSync('.env.test'),
      dev: existsSync('.env.development')
    }
  }

  private async selectEnvironments(): Promise<{ source: string, target: string }> {
    const envFiles = this.checkEnvironmentFiles()
    
    console.log('üìÅ ENVIRONNEMENTS D√âTECT√âS:')
    console.log(`${envFiles.prod ? '‚úÖ' : '‚ùå'} PROD (.env.production)`)
    console.log(`${envFiles.test ? '‚úÖ' : '‚ùå'} TEST (.env.test)`)
    console.log(`${envFiles.dev ? '‚úÖ' : '‚ùå'} DEV (.env.development)`)
    console.log('')

    // S√©lection de la source
    let source = ''
    while (!source) {
      const sourceInput = await this.prompt('üîó Environnement SOURCE (prod/test/dev): ')
      
      if (!['prod', 'test', 'dev'].includes(sourceInput)) {
        console.log('‚ùå Environnement invalide. Utilisez: prod, test, dev')
        continue
      }
      
      if (!envFiles[sourceInput as keyof typeof envFiles]) {
        console.log(`‚ùå Fichier .env.${sourceInput === 'dev' ? 'development' : sourceInput} non trouv√©`)
        const create = await this.prompt('Voulez-vous le cr√©er maintenant? (o/n): ')
        if (create.toLowerCase() === 'o') {
          console.log(`üí° Utilisez: npm run setup:${sourceInput}`)
          return { source: '', target: '' }
        }
        continue
      }
      
      source = sourceInput
    }

    // S√©lection de la cible
    let target = ''
    while (!target) {
      const targetInput = await this.prompt('üéØ Environnement CIBLE (prod/test/dev): ')
      
      if (!['prod', 'test', 'dev'].includes(targetInput)) {
        console.log('‚ùå Environnement invalide. Utilisez: prod, test, dev')
        continue
      }
      
      if (targetInput === source) {
        console.log('‚ùå La source et la cible ne peuvent pas √™tre identiques')
        continue
      }
      
      if (targetInput === 'prod') {
        console.log('‚ùå Clonage vers PROD interdit pour des raisons de s√©curit√©')
        continue
      }
      
      if (!envFiles[targetInput as keyof typeof envFiles]) {
        console.log(`‚ùå Fichier .env.${targetInput === 'dev' ? 'development' : targetInput} non trouv√©`)
        const create = await this.prompt('Voulez-vous le cr√©er maintenant? (o/n): ')
        if (create.toLowerCase() === 'o') {
          console.log(`üí° Utilisez: npm run setup:${targetInput}`)
          return { source: '', target: '' }
        }
        continue
      }
      
      target = targetInput
    }

    return { source, target }
  }

  private async confirmClone(source: string, target: string): Promise<boolean> {
    console.log('')
    console.log('‚ö†Ô∏è CONFIRMATION DE CLONAGE')
    console.log('='.repeat(40))
    console.log(`üìä Source: ${source.toUpperCase()}`)
    console.log(`üéØ Cible: ${target.toUpperCase()}`)
    console.log('')
    console.log('üîÑ Cette op√©ration va:')
    console.log('‚Ä¢ Cr√©er une sauvegarde de la cible')
    console.log('‚Ä¢ Remplacer COMPL√àTEMENT la base cible')
    console.log('‚Ä¢ Cloner toutes les donn√©es et le sch√©ma')
    console.log('‚Ä¢ G√©n√©rer un rapport d√©taill√©')
    console.log('')
    
    if (source === 'prod') {
      console.log('‚ö†Ô∏è ATTENTION: Vous clonez depuis la PRODUCTION!')
      console.log('üìã Assurez-vous que c\'est bien n√©cessaire.')
      console.log('')
    }

    const confirm = await this.prompt('Continuer? (oui/non): ')
    return confirm.toLowerCase() === 'oui' || confirm.toLowerCase() === 'o'
  }

  private async executeClone(source: string, target: string): Promise<boolean> {
    console.log('')
    console.log('üöÄ D√âMARRAGE DU CLONAGE')
    console.log('='.repeat(40))
    
    try {
      console.log('üìã Ex√©cution du script de clonage complet...')
      console.log('')
      
      execSync(`npm run tsx scripts/clone-environment-complet.ts ${source} ${target}`, {
        stdio: 'inherit'
      })
      
      return true
      
    } catch (error) {
      console.log('')
      console.log('‚ùå ERREUR LORS DU CLONAGE')
      console.log(`D√©tails: ${error}`)
      return false
    }
  }

  private async executeValidation(target: string): Promise<boolean> {
    console.log('')
    console.log('üîç VALIDATION POST-CLONAGE')
    console.log('='.repeat(40))
    
    try {
      execSync(`npm run tsx scripts/validate-clone.ts ${target}`, {
        stdio: 'inherit'
      })
      
      return true
      
    } catch (error) {
      console.log('')
      console.log('‚ö†Ô∏è PROBL√àMES D√âTECT√âS LORS DE LA VALIDATION')
      console.log(`D√©tails: ${error}`)
      return false
    }
  }

  private async showNextSteps(source: string, target: string, success: boolean): Promise<void> {
    console.log('')
    console.log('üìã PROCHAINES √âTAPES')
    console.log('='.repeat(40))
    
    if (success) {
      console.log('üéâ Clonage termin√© avec succ√®s!')
      console.log('')
      console.log('‚úÖ Actions recommand√©es:')
      console.log(`1. Basculer vers l'environnement: npm run env:${target}`)
      console.log('2. Tester la connexion: npm run test-env')
      console.log('3. Lancer l\'application: npm run dev')
      console.log('4. V√©rifier l\'interface utilisateur')
      console.log('')
      console.log('üìÑ Fichiers g√©n√©r√©s:')
      console.log('‚Ä¢ Rapport de clonage (clone_report_*.json)')
      console.log('‚Ä¢ Instructions d√©taill√©es (clone_instructions_*.md)')
      console.log('‚Ä¢ Sauvegarde de s√©curit√© (backup_*.json)')
      
    } else {
      console.log('‚ö†Ô∏è Clonage termin√© avec des probl√®mes')
      console.log('')
      console.log('üîß Actions de d√©pannage:')
      console.log('1. Consultez le rapport de clonage')
      console.log('2. V√©rifiez les logs d\'erreur')
      console.log('3. Appliquez manuellement le sch√©ma si n√©cessaire')
      console.log('4. Relancez le clonage si les probl√®mes persistent')
      console.log('')
      console.log('üí° Restauration possible:')
      console.log(`   npm run restore:database backup_${target}_[timestamp].json`)
    }

    console.log('')
    console.log('üìö Documentation compl√®te: GUIDE_CLONAGE_COMPLET.md')
  }

  private async offerAdditionalActions(): Promise<void> {
    console.log('')
    console.log('üõ†Ô∏è ACTIONS SUPPL√âMENTAIRES DISPONIBLES')
    console.log('='.repeat(50))
    
    while (true) {
      console.log('')
      console.log('Que souhaitez-vous faire?')
      console.log('1. Valider un autre environnement')
      console.log('2. Configurer un nouvel environnement')
      console.log('3. Voir l\'aide des scripts')
      console.log('4. Quitter')
      console.log('')
      
      const choice = await this.prompt('Votre choix (1-4): ')
      
      switch (choice) {
        case '1':
          const env = await this.prompt('Environnement √† valider (test/dev): ')
          if (['test', 'dev'].includes(env)) {
            try {
              execSync(`npm run validate:${env}`, { stdio: 'inherit' })
            } catch (error) {
              console.log('‚ùå Erreur de validation')
            }
          }
          break
          
        case '2':
          const newEnv = await this.prompt('Nouvel environnement (test/dev/prod): ')
          if (['test', 'dev', 'prod'].includes(newEnv)) {
            try {
              execSync(`npm run setup:${newEnv}`, { stdio: 'inherit' })
            } catch (error) {
              console.log('‚ùå Erreur de configuration')
            }
          }
          break
          
        case '3':
          this.showScriptHelp()
          break
          
        case '4':
          console.log('üëã Au revoir!')
          return
          
        default:
          console.log('‚ùå Choix invalide')
      }
    }
  }

  private showScriptHelp(): void {
    console.log('')
    console.log('üìö AIDE DES SCRIPTS DISPONIBLES')
    console.log('='.repeat(50))
    console.log('')
    console.log('üîÑ CLONAGE:')
    console.log('‚Ä¢ npm run clone:complete:prod-to-test  - Clone PROD vers TEST')
    console.log('‚Ä¢ npm run clone:complete:prod-to-dev   - Clone PROD vers DEV')
    console.log('‚Ä¢ npm run clone:complete:test-to-dev   - Clone TEST vers DEV')
    console.log('')
    console.log('üîç VALIDATION:')
    console.log('‚Ä¢ npm run validate:test               - Valide l\'environnement TEST')
    console.log('‚Ä¢ npm run validate:dev                - Valide l\'environnement DEV')
    console.log('')
    console.log('‚öôÔ∏è CONFIGURATION:')
    console.log('‚Ä¢ npm run setup:test                  - Configure nouvel env TEST')
    console.log('‚Ä¢ npm run setup:dev                   - Configure nouvel env DEV')
    console.log('')
    console.log('üíæ SAUVEGARDE/RESTAURATION:')
    console.log('‚Ä¢ npm run export:test                 - Exporte TEST')
    console.log('‚Ä¢ npm run restore:database [file]     - Restaure depuis sauvegarde')
    console.log('')
    console.log('üîß ENVIRONNEMENT:')
    console.log('‚Ä¢ npm run env:test                    - Bascule vers TEST')
    console.log('‚Ä¢ npm run env:dev                     - Bascule vers DEV')
    console.log('‚Ä¢ npm run test-env                    - Test environnement actuel')
  }

  async executeGuide(): Promise<void> {
    try {
      await this.showWelcome()
      
      const { source, target } = await this.selectEnvironments()
      
      if (!source || !target) {
        console.log('üëã Configuration d\'environnement requise. Relancez le guide apr√®s.')
        return
      }
      
      const confirmed = await this.confirmClone(source, target)
      if (!confirmed) {
        console.log('‚ùå Clonage annul√© par l\'utilisateur')
        return
      }
      
      const cloneSuccess = await this.executeClone(source, target)
      const validationSuccess = cloneSuccess ? await this.executeValidation(target) : false
      
      await this.showNextSteps(source, target, cloneSuccess && validationSuccess)
      await this.offerAdditionalActions()
      
    } catch (error) {
      console.error('‚ùå Erreur dans le guide:', error)
    }
  }
}

async function main() {
  const guide = new CloneGuide()
  await guide.executeGuide()
}

main().catch(console.error)