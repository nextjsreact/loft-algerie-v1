# =====================================================
# CONFIGURATION POUR VOS ENVIRONNEMENTS
# =====================================================
# Fichier de configuration centralis√© - √Ä personnaliser selon votre setup

# üè¢ ENVIRONNEMENT PRODUCTION
$Global:ProdConfig = @{
    Host = "localhost"          # Remplacez par votre serveur PROD
    Database = "loft_prod"      # Nom de votre base PROD
    User = "postgres"           # Utilisateur PostgreSQL
    Port = "5432"              # Port PostgreSQL (g√©n√©ralement 5432)
}

# üß™ ENVIRONNEMENT TEST
$Global:TestConfig = @{
    Host = "localhost"          # Serveur TEST (souvent le m√™me que DEV)
    Database = "loft_test"      # Nom de votre base TEST
    User = "postgres"           # Utilisateur PostgreSQL
    Port = "5432"              # Port PostgreSQL
}

# üîß ENVIRONNEMENT D√âVELOPPEMENT
$Global:DevConfig = @{
    Host = "localhost"          # Serveur DEV (local g√©n√©ralement)
    Database = "loft_dev"       # Nom de votre base DEV
    User = "postgres"           # Utilisateur PostgreSQL
    Port = "5432"              # Port PostgreSQL
}

# üìÅ CONFIGURATION DES DOSSIERS
$Global:Paths = @{
    BackupDir = ".\backups"     # Dossier pour les sauvegardes
    ScriptsDir = ".\scripts"    # Dossier des scripts SQL
    LogsDir = ".\logs"          # Dossier pour les logs
}

# üîê UTILISATEURS DE TEST (cr√©√©s automatiquement)
$Global:TestUsers = @(
    @{ Email = "admin@test.local"; Name = "Admin Test"; Role = "admin" },
    @{ Email = "manager@test.local"; Name = "Manager Test"; Role = "manager" },
    @{ Email = "user@test.local"; Name = "User Test"; Role = "member" }
)

# üìã TABLES √Ä EXCLURE DU CLONAGE (donn√©es sensibles)
$Global:ExcludedTables = @(
    "auth.users",
    "auth.sessions", 
    "auth.refresh_tokens",
    "profiles",
    "user_sessions",
    "notifications",
    "messages"
)

# üéØ FONCTION POUR OBTENIR LA CONFIGURATION D'UN ENVIRONNEMENT
function Get-EnvConfig {
    param([string]$Environment)
    
    switch ($Environment.ToLower()) {
        "prod" { return $Global:ProdConfig }
        "test" { return $Global:TestConfig }
        "dev" { return $Global:DevConfig }
        default { 
            Write-Host "‚ùå Environnement '$Environment' non reconnu. Utilisez: prod, test, dev" -ForegroundColor Red
            return $null
        }
    }
}

# üîß FONCTION POUR CONSTRUIRE LA CHA√éNE DE CONNEXION
function Get-ConnectionString {
    param([hashtable]$Config)
    
    return "postgresql://$($Config.User)@$($Config.Host):$($Config.Port)/$($Config.Database)"
}

# üìä FONCTION POUR AFFICHER LA CONFIGURATION
function Show-Configuration {
    Write-Host "üìã CONFIGURATION ACTUELLE:" -ForegroundColor Cyan
    Write-Host "=========================="
    
    Write-Host "üè¢ PRODUCTION:" -ForegroundColor Yellow
    Write-Host "  Host: $($Global:ProdConfig.Host)"
    Write-Host "  Database: $($Global:ProdConfig.Database)"
    Write-Host "  User: $($Global:ProdConfig.User)"
    Write-Host ""
    
    Write-Host "üß™ TEST:" -ForegroundColor Yellow
    Write-Host "  Host: $($Global:TestConfig.Host)"
    Write-Host "  Database: $($Global:TestConfig.Database)"
    Write-Host "  User: $($Global:TestConfig.User)"
    Write-Host ""
    
    Write-Host "üîß D√âVELOPPEMENT:" -ForegroundColor Yellow
    Write-Host "  Host: $($Global:DevConfig.Host)"
    Write-Host "  Database: $($Global:DevConfig.Database)"
    Write-Host "  User: $($Global:DevConfig.User)"
    Write-Host ""
    
    Write-Host "üìÅ DOSSIERS:" -ForegroundColor Yellow
    Write-Host "  Sauvegardes: $($Global:Paths.BackupDir)"
    Write-Host "  Scripts: $($Global:Paths.ScriptsDir)"
    Write-Host "  Logs: $($Global:Paths.LogsDir)"
}

# üöÄ FONCTION DE V√âRIFICATION DES PR√âREQUIS
function Test-Prerequisites {
    Write-Host "üîç V√âRIFICATION DES PR√âREQUIS..." -ForegroundColor Yellow
    
    $AllGood = $true
    
    # V√©rifier PostgreSQL client
    if (!(Get-Command psql -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå psql non trouv√©" -ForegroundColor Red
        Write-Host "üí° Installez PostgreSQL client depuis: https://www.postgresql.org/download/windows/" -ForegroundColor Yellow
        $AllGood = $false
    } else {
        Write-Host "‚úÖ psql trouv√©" -ForegroundColor Green
    }
    
    # V√©rifier pg_dump
    if (!(Get-Command pg_dump -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå pg_dump non trouv√©" -ForegroundColor Red
        $AllGood = $false
    } else {
        Write-Host "‚úÖ pg_dump trouv√©" -ForegroundColor Green
    }
    
    # Cr√©er les dossiers n√©cessaires
    foreach ($path in $Global:Paths.Values) {
        if (!(Test-Path $path)) {
            New-Item -ItemType Directory -Path $path -Force | Out-Null
            Write-Host "‚úÖ Dossier cr√©√©: $path" -ForegroundColor Green
        }
    }
    
    return $AllGood
}

# Message d'information
Write-Host "üìã Configuration charg√©e!" -ForegroundColor Green
Write-Host "üí° Utilisez 'Show-Configuration' pour voir les param√®tres"
Write-Host "üîß Modifiez ce fichier selon votre environnement"