#!/usr/bin/env tsx
/**
 * SCRIPT DE CORRECTION DES ERREURS WEBPACK
 * ========================================
 * 
 * Diagnostique et corrige les erreurs webpack courantes
 * Sp√©cialement pour les erreurs Next.js devtools
 */

import { execSync } from 'child_process'
import { existsSync, readFileSync, writeFileSync } from 'fs'

class WebpackErrorFixer {
  
  async diagnoseAndFix(): Promise<void> {
    console.log('üîß DIAGNOSTIC ET CORRECTION WEBPACK')
    console.log('='.repeat(50))

    try {
      // 1. Nettoyer le cache
      await this.clearCache()
      
      // 2. V√©rifier Next.js config
      await this.checkNextConfig()
      
      // 3. V√©rifier les d√©pendances
      await this.checkDependencies()
      
      // 4. Corriger les probl√®mes courants
      await this.fixCommonIssues()
      
      // 5. Red√©marrer le serveur de d√©veloppement
      await this.restartDev()
      
      console.log('\n‚úÖ CORRECTION TERMIN√âE!')
      console.log('üöÄ Votre application devrait maintenant fonctionner correctement.')
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la correction:', error)
      this.showManualSteps()
    }
  }

  private async clearCache(): Promise<void> {
    console.log('\nüßπ Nettoyage du cache...')
    
    try {
      // Supprimer .next
      if (existsSync('.next')) {
        execSync('rmdir /s /q .next', { stdio: 'inherit' })
        console.log('   ‚úÖ Cache .next supprim√©')
      }
      
      // Supprimer node_modules/.cache
      if (existsSync('node_modules/.cache')) {
        execSync('rmdir /s /q node_modules\\.cache', { stdio: 'inherit' })
        console.log('   ‚úÖ Cache node_modules supprim√©')
      }
      
      // Nettoyer npm cache
      execSync('npm cache clean --force', { stdio: 'inherit' })
      console.log('   ‚úÖ Cache npm nettoy√©')
      
    } catch (error) {
      console.log('   ‚ö†Ô∏è Nettoyage partiel (certains fichiers peuvent √™tre verrouill√©s)')
    }
  }

  private async checkNextConfig(): Promise<void> {
    console.log('\n‚öôÔ∏è V√©rification de la configuration Next.js...')
    
    if (!existsSync('next.config.mjs')) {
      console.log('   ‚ö†Ô∏è next.config.mjs non trouv√©')
      return
    }

    const config = readFileSync('next.config.mjs', 'utf8')
    
    // V√©rifier si la configuration contient des probl√®mes connus
    if (config.includes('experimental')) {
      console.log('   ‚ö†Ô∏è Configuration exp√©rimentale d√©tect√©e')
    }
    
    console.log('   ‚úÖ Configuration Next.js v√©rifi√©e')
  }

  private async checkDependencies(): Promise<void> {
    console.log('\nüì¶ V√©rification des d√©pendances...')
    
    try {
      // V√©rifier les versions de Next.js et React
      const packageJson = JSON.parse(readFileSync('package.json', 'utf8'))
      
      console.log(`   üìã Next.js: ${packageJson.dependencies.next}`)
      console.log(`   üìã React: ${packageJson.dependencies.react}`)
      console.log(`   üìã React-DOM: ${packageJson.dependencies['react-dom']}`)
      
      // V√©rifier les d√©pendances PDF
      if (packageJson.dependencies.jspdf) {
        console.log(`   üìã jsPDF: ${packageJson.dependencies.jspdf}`)
        console.log('   ‚úÖ D√©pendances PDF install√©es')
      }
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors de la v√©rification des d√©pendances')
    }
  }

  private async fixCommonIssues(): Promise<void> {
    console.log('\nüîß Correction des probl√®mes courants...')
    
    // 1. Cr√©er/mettre √† jour next.config.mjs avec corrections
    await this.updateNextConfig()
    
    // 2. V√©rifier TypeScript config
    await this.checkTypeScriptConfig()
    
    // 3. R√©installer les d√©pendances si n√©cessaire
    await this.reinstallDependencies()
  }

  private async updateNextConfig(): Promise<void> {
    console.log('   üîß Mise √† jour de next.config.mjs...')
    
    const fixedConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    unoptimized: process.env.NODE_ENV === 'development',
    domains: process.env.NODE_ENV === 'production' 
      ? ['loft-algerie.com', 'cdn.loft-algerie.com']
      : ['localhost'],
  },
  
  // Configuration pour √©viter les erreurs webpack
  webpack: (config, { dev, isServer }) => {
    // Correction pour jsPDF et autres d√©pendances client-side
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: false,
      }
    }
    
    // Optimisations pour le d√©veloppement
    if (dev) {
      config.watchOptions = {
        poll: 1000,
        aggregateTimeout: 300,
      }
    }
    
    return config
  },
  
  serverExternalPackages: ['pg'],
  
  typescript: {
    ignoreBuildErrors: true,
  },
  
  eslint: {
    ignoreDuringBuilds: true,
  },
  
  // Configuration par environnement
  env: {
    NEXT_PUBLIC_HAS_DB: 'true',
    ENVIRONMENT: process.env.NODE_ENV,
  },

  // Optimisations pour la production
  ...(process.env.NODE_ENV === 'production' && {
    compress: true,
    poweredByHeader: false,
    generateEtags: true,
    
    // Headers de s√©curit√©
    async headers() {
      return [
        {
          source: '/(.*)',
          headers: [
            {
              key: 'X-Frame-Options',
              value: 'DENY',
            },
            {
              key: 'X-Content-Type-Options',
              value: 'nosniff',
            },
            {
              key: 'Referrer-Policy',
              value: 'origin-when-cross-origin',
            },
          ],
        },
      ]
    },
  }),

  // Configuration de d√©veloppement
  ...(process.env.NODE_ENV === 'development' && {
    reactStrictMode: false, // D√©sactiv√© pour √©viter les erreurs de d√©veloppement
  }),
  
  async rewrites() {
    return [
      {
        source: '/locales/:lng/:ns.json',
        destination: '/public/locales/:lng/:ns.json',
      },
    ]
  },
}
  
export default nextConfig`

    writeFileSync('next.config.mjs', fixedConfig)
    console.log('   ‚úÖ next.config.mjs mis √† jour avec corrections webpack')
  }

  private async checkTypeScriptConfig(): Promise<void> {
    console.log('   üîß V√©rification de tsconfig.json...')
    
    if (!existsSync('tsconfig.json')) {
      console.log('   ‚ö†Ô∏è tsconfig.json non trouv√©')
      return
    }

    try {
      const tsConfig = JSON.parse(readFileSync('tsconfig.json', 'utf8'))
      
      // Ajouter des configurations pour √©viter les erreurs
      const updates = {
        compilerOptions: {
          ...tsConfig.compilerOptions,
          skipLibCheck: true,
          forceConsistentCasingInFileNames: false,
          resolveJsonModule: true,
          isolatedModules: true,
          incremental: true
        }
      }
      
      writeFileSync('tsconfig.json', JSON.stringify(updates, null, 2))
      console.log('   ‚úÖ tsconfig.json optimis√©')
      
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erreur lors de la mise √† jour de tsconfig.json')
    }
  }

  private async reinstallDependencies(): Promise<void> {
    console.log('   üì¶ R√©installation des d√©pendances critiques...')
    
    try {
      // R√©installer Next.js et React
      execSync('npm install next@latest react@latest react-dom@latest', { stdio: 'inherit' })
      console.log('   ‚úÖ Next.js et React r√©install√©s')
      
      // R√©installer les d√©pendances PDF
      execSync('npm install jspdf jspdf-autotable html2canvas react-to-print @types/jspdf', { stdio: 'inherit' })
      console.log('   ‚úÖ D√©pendances PDF r√©install√©es')
      
    } catch (error) {
      console.log('   ‚ö†Ô∏è R√©installation partielle (continuez manuellement si n√©cessaire)')
    }
  }

  private async restartDev(): Promise<void> {
    console.log('\nüöÄ Instructions pour red√©marrer...')
    console.log('   1. Arr√™tez le serveur de d√©veloppement (Ctrl+C)')
    console.log('   2. Ex√©cutez: npm run dev')
    console.log('   3. Attendez que la compilation soit termin√©e')
    console.log('   4. Testez l\'application dans votre navigateur')
  }

  private showManualSteps(): void {
    console.log('\nüõ†Ô∏è √âTAPES MANUELLES DE CORRECTION')
    console.log('='.repeat(50))
    console.log('')
    console.log('Si les erreurs persistent, suivez ces √©tapes:')
    console.log('')
    console.log('1. Nettoyage complet:')
    console.log('   rmdir /s /q .next')
    console.log('   rmdir /s /q node_modules')
    console.log('   npm cache clean --force')
    console.log('')
    console.log('2. R√©installation:')
    console.log('   npm install')
    console.log('')
    console.log('3. Test des rapports PDF:')
    console.log('   npm run reports:test')
    console.log('')
    console.log('4. Red√©marrage:')
    console.log('   npm run dev')
    console.log('')
    console.log('5. Si le probl√®me persiste:')
    console.log('   - V√©rifiez que Node.js >= 18.0.0')
    console.log('   - D√©sactivez temporairement les extensions VS Code')
    console.log('   - Red√©marrez votre terminal/IDE')
  }
}

async function main() {
  const fixer = new WebpackErrorFixer()
  await fixer.diagnoseAndFix()
}

main().catch(console.error)