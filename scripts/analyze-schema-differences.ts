#!/usr/bin/env tsx
/**
 * ANALYSE DES DIFF√âRENCES DE SCH√âMA
 * Identifie pourquoi les donn√©es ne se clonent pas compl√®tement
 */

import { createClient } from '@supabase/supabase-js'
import { readFileSync, existsSync } from 'fs'

interface Environment {
  name: string
  url: string
  key: string
  client: any
}

class SchemaAnalysis {
  private environments: Map<string, Environment> = new Map()

  constructor() {
    this.loadEnvironments()
  }

  private loadEnvironments() {
    const envConfigs = [
      { name: 'prod', file: '.env.production' },
      { name: 'test', file: '.env.test' },
      { name: 'dev', file: '.env.development' }
    ]

    for (const config of envConfigs) {
      try {
        if (existsSync(config.file)) {
          const envContent = readFileSync(config.file, 'utf8')
          const envVars: any = {}
          
          envContent.split('\n').forEach(line => {
            const [key, ...valueParts] = line.split('=')
            if (key && valueParts.length > 0) {
              envVars[key.trim()] = valueParts.join('=').replace(/"/g, '').trim()
            }
          })

          if (envVars.NEXT_PUBLIC_SUPABASE_URL && envVars.SUPABASE_SERVICE_ROLE_KEY) {
            // V√©rifier que les valeurs ne sont pas des placeholders
            const hasPlaceholders = envVars.NEXT_PUBLIC_SUPABASE_URL.includes('[') || 
                                   envVars.SUPABASE_SERVICE_ROLE_KEY.includes('[')
            
            if (!hasPlaceholders) {
              const env: Environment = {
                name: config.name,
                url: envVars.NEXT_PUBLIC_SUPABASE_URL,
                key: envVars.SUPABASE_SERVICE_ROLE_KEY,
                client: createClient(envVars.NEXT_PUBLIC_SUPABASE_URL, envVars.SUPABASE_SERVICE_ROLE_KEY)
              }
              this.environments.set(config.name, env)
            }
          }
        }
      } catch (error) {
        // Ignorer les erreurs de chargement
      }
    }
  }

  private async analyzeTable(tableName: string): Promise<void> {
    console.log(`\nüìã ANALYSE DE ${tableName.toUpperCase()}`)
    console.log('='.repeat(50))

    for (const [envName, env] of this.environments) {
      try {
        // Tester l'existence et compter les enregistrements
        const { data, error, count } = await env.client
          .from(tableName)
          .select('*', { count: 'exact', head: true })

        if (error) {
          console.log(`‚ùå ${envName.toUpperCase()}: Table n'existe pas ou inaccessible`)
          console.log(`   Erreur: ${error.message}`)
          continue
        }

        // R√©cup√©rer la structure en analysant un √©chantillon
        let columns: string[] = []
        if (count && count > 0) {
          const { data: sampleData } = await env.client
            .from(tableName)
            .select('*')
            .limit(1)
          
          if (sampleData && sampleData.length > 0) {
            columns = Object.keys(sampleData[0])
          }
        }

        console.log(`‚úÖ ${envName.toUpperCase()}: ${columns.length} colonnes, ${count || 0} enregistrements`)
        if (columns.length > 0) {
          console.log(`   Colonnes: ${columns.join(', ')}`)
        }

      } catch (error) {
        console.log(`‚ùå ${envName.toUpperCase()}: Erreur - ${error}`)
      }
    }
  }

  async analyzeProblematicTables(): Promise<void> {
    console.log('üîç ANALYSE DES PROBL√àMES DE CLONAGE')
    console.log('='.repeat(60))

    // Tables qui posent probl√®me
    const problematicTables = [
      'profiles',
      'internet_connection_types', 
      'lofts',
      'teams',
      'tasks',
      'notifications'
    ]

    for (const tableName of problematicTables) {
      await this.analyzeTable(tableName)
    }

    console.log('\nüí° PROBL√àMES IDENTIFI√âS:')
    console.log('='.repeat(30))
    console.log('1. üîê CONTRAINTES D\'AUTHENTIFICATION:')
    console.log('   ‚Ä¢ profiles.id doit r√©f√©rencer auth.users (Supabase Auth)')
    console.log('   ‚Ä¢ Impossible d\'ins√©rer des profils sans utilisateurs auth correspondants')
    console.log('')
    console.log('2. üìä DIFF√âRENCES DE SCH√âMA:')
    console.log('   ‚Ä¢ Colonnes manquantes dans TEST/DEV')
    console.log('   ‚Ä¢ Types de donn√©es diff√©rents')
    console.log('   ‚Ä¢ Contraintes enum diff√©rentes')
    console.log('')
    console.log('3. üîó CONTRAINTES DE CL√âS √âTRANG√àRES:')
    console.log('   ‚Ä¢ teams.created_by ‚Üí profiles.id')
    console.log('   ‚Ä¢ tasks.assigned_to ‚Üí profiles.id')
    console.log('   ‚Ä¢ notifications.user_id ‚Üí profiles.id')
    console.log('')
    console.log('4. üèóÔ∏è ENVIRONNEMENTS CR√â√âS S√âPAR√âMENT:')
    console.log('   ‚Ä¢ PROD: Environnement existant avec donn√©es r√©elles')
    console.log('   ‚Ä¢ TEST: Nouvel environnement avec sch√©ma partiel')
    console.log('   ‚Ä¢ DEV: Nouvel environnement avec sch√©ma partiel')
  }

  async suggestSolutions(): Promise<void> {
    console.log('\nüéØ SOLUTIONS RECOMMAND√âES:')
    console.log('='.repeat(40))
    console.log('')
    console.log('üîß SOLUTION 1: EXPORT/IMPORT COMPLET (Recommand√©e)')
    console.log('   ‚Ä¢ Exporter PROD avec pg_dump')
    console.log('   ‚Ä¢ Importer vers TEST/DEV avec psql')
    console.log('   ‚Ä¢ R√©sout tous les probl√®mes de sch√©ma')
    console.log('   ‚Ä¢ Pr√©serve toutes les contraintes')
    console.log('')
    console.log('üîß SOLUTION 2: SYNCHRONISATION MANUELLE DES SCH√âMAS')
    console.log('   ‚Ä¢ Utiliser Supabase Dashboard pour ajuster les sch√©mas')
    console.log('   ‚Ä¢ Ajouter les colonnes manquantes')
    console.log('   ‚Ä¢ Corriger les types de donn√©es')
    console.log('')
    console.log('üîß SOLUTION 3: RECR√âER TEST/DEV DEPUIS PROD')
    console.log('   ‚Ä¢ Dupliquer le projet PROD dans Supabase')
    console.log('   ‚Ä¢ Garantit une compatibilit√© parfaite')
    console.log('')
    console.log('üîß SOLUTION 4: CONTINUER AVEC SYNCHRONISATION PARTIELLE')
    console.log('   ‚Ä¢ Accepter que certaines tables ne se synchronisent pas')
    console.log('   ‚Ä¢ Utiliser les donn√©es de r√©f√©rence synchronis√©es')
    console.log('   ‚Ä¢ Cr√©er des donn√©es de test manuellement')
  }
}

async function main() {
  const analysis = new SchemaAnalysis()
  
  try {
    await analysis.analyzeProblematicTables()
    await analysis.suggestSolutions()
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  }
}

main().catch(console.error)