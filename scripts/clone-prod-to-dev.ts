#!/usr/bin/env tsx
/**
 * Script sp√©cialis√©: Clonage Production ‚Üí D√©veloppement
 * Clone les donn√©es de production vers l'environnement de d√©veloppement
 */

import { DataCloner } from './clone-data'

async function cloneProdToDev() {
  console.log('üîß CLONAGE PRODUCTION ‚Üí D√âVELOPPEMENT')
  console.log('=' .repeat(50))
  console.log('Ce script clone les donn√©es de production vers l\'environnement de d√©veloppement.')
  console.log('‚ö†Ô∏è Les donn√©es existantes en d√©veloppement seront remplac√©es.\n')

  // Confirmation de s√©curit√©
  const { createInterface } = await import('readline')
  const rl = createInterface({
    input: process.stdin,
    output: process.stdout
  })

  const confirm = await new Promise(resolve => {
    rl.question('√ätes-vous s√ªr de vouloir remplacer les donn√©es de d√©veloppement? (tapez OUI): ', resolve)
  })

  rl.close()

  if (confirm !== 'OUI') {
    console.log('‚ùå Op√©ration annul√©e')
    return
  }

  const cloner = new DataCloner({
    source: 'prod',
    target: 'dev',
    excludeSensitive: false, // Inclure TOUTES les donn√©es (avec anonymisation)
    dryRun: false
  })

  await cloner.cloneData()
  
  console.log('\nüéØ RECOMMANDATIONS POST-CLONAGE:')
  console.log('‚Ä¢ Testez la connexion: npm run env:switch:dev && npm run dev')
  console.log('‚Ä¢ TOUTES les donn√©es ont √©t√© clon√©es avec anonymisation')
  console.log('‚Ä¢ Mot de passe universel pour DEV: dev123')
  console.log('‚Ä¢ Tous les utilisateurs peuvent se connecter avec: dev123')
  console.log('‚Ä¢ Les donn√©es sont maintenant synchronis√©es avec la production')
}

cloneProdToDev().catch(console.error)