#!/usr/bin/env node
/**
 * Guide pas √† pas pour la mise en place des environnements multi-stages
 * Ce script vous accompagne dans toute la configuration
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

function executeCommand(command, description) {
  console.log(`\nüîÑ ${description}...`);
  console.log(`Commande: ${command}`);
  try {
    execSync(command, { stdio: 'inherit' });
    console.log('‚úÖ Termin√©!');
    return true;
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
    return false;
  }
}

async function stepByStepGuide() {
  console.log('üéØ GUIDE PAS √Ä PAS - ENVIRONNEMENTS MULTI-STAGES');
  console.log('=' .repeat(60));
  console.log('Ce guide vous accompagne dans la mise en place compl√®te de vos environnements.\n');

  try {
    // √âtape 1: V√©rification des pr√©requis
    console.log('üìã √âTAPE 1: V√©rification des pr√©requis');
    console.log('-' .repeat(40));
    
    const hasNodejs = await question('Avez-vous Node.js 18+ install√©? (o/n): ');
    if (hasNodejs.toLowerCase() !== 'o') {
      console.log('‚ùå Veuillez installer Node.js 18+ depuis https://nodejs.org');
      return;
    }

    const hasSupabase = await question('Avez-vous un compte Supabase? (o/n): ');
    if (hasSupabase.toLowerCase() !== 'o') {
      console.log('üìù Cr√©ez un compte sur https://supabase.com');
      await question('Appuyez sur Entr√©e quand c\'est fait...');
    }

    // √âtape 2: Configuration du projet Supabase de d√©veloppement
    console.log('\nüóÑÔ∏è √âTAPE 2: Configuration du projet Supabase de d√©veloppement');
    console.log('-' .repeat(40));
    
    console.log('1. Allez sur https://supabase.com/dashboard');
    console.log('2. Cliquez sur "New project"');
    console.log('3. Nommez votre projet: "loft-algerie-dev"');
    console.log('4. Choisissez la r√©gion: "Europe West (Ireland)"');
    console.log('5. Cr√©ez le projet');
    
    await question('Appuyez sur Entr√©e quand votre projet est cr√©√©...');

    // Collecte des informations Supabase
    console.log('\nüîë R√©cup√©ration des cl√©s Supabase:');
    console.log('Dans votre dashboard Supabase, allez dans Settings > API');
    
    const supabaseUrl = await question('URL du projet (Project URL): ');
    const anonKey = await question('Cl√© anonyme (anon/public): ');
    const serviceRoleKey = await question('Cl√© service_role: ');

    // √âtape 3: Configuration de l'environnement local
    console.log('\n‚öôÔ∏è √âTAPE 3: Configuration de l\'environnement local');
    console.log('-' .repeat(40));

    const authSecret = require('crypto').randomBytes(32).toString('hex');
    
    const envContent = `# ===========================================
# ENVIRONNEMENT DE D√âVELOPPEMENT LOCAL
# ===========================================
# G√©n√©r√© le ${new Date().toLocaleString()}

# Base de donn√©es Supabase - D√©veloppement
NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${anonKey}
SUPABASE_SERVICE_ROLE_KEY="${serviceRoleKey}"

# Authentication
AUTH_SECRET=${authSecret}

# Application
NEXT_PUBLIC_APP_URL=http://localhost:3000
NODE_ENV=development

# Logging et Debug
NEXT_PUBLIC_DEBUG_MODE=true
LOG_LEVEL=debug

# Notifications temps r√©el
NEXT_PUBLIC_REALTIME_ENABLED=true

# Base de donn√©es locale
NEXT_PUBLIC_HAS_DB=true
`;

    fs.writeFileSync('.env.local', envContent);
    console.log('‚úÖ Fichier .env.local cr√©√©!');

    // √âtape 4: Application du sch√©ma de base de donn√©es
    console.log('\nüìä √âTAPE 4: Application du sch√©ma de base de donn√©es');
    console.log('-' .repeat(40));
    
    if (fs.existsSync('schema.sql')) {
      console.log('Sch√©ma d√©tect√©. Application en cours...');
      console.log('\nüìù Instructions pour appliquer le sch√©ma:');
      console.log('1. Ouvrez votre dashboard Supabase');
      console.log('2. Allez dans "SQL Editor"');
      console.log('3. Cliquez sur "New query"');
      console.log('4. Copiez tout le contenu du fichier schema.sql');
      console.log('5. Collez-le dans l\'√©diteur et cliquez sur "Run"');
      
      await question('Appuyez sur Entr√©e quand le sch√©ma est appliqu√©...');
    }

    // √âtape 5: Installation des d√©pendances
    console.log('\nüì¶ √âTAPE 5: Installation des d√©pendances');
    console.log('-' .repeat(40));
    
    const installDeps = await question('Installer les d√©pendances maintenant? (o/n): ');
    if (installDeps.toLowerCase() === 'o') {
      executeCommand('npm install', 'Installation des d√©pendances');
    }

    // √âtape 6: Test de l'environnement
    console.log('\nüß™ √âTAPE 6: Test de l\'environnement');
    console.log('-' .repeat(40));
    
    const testEnv = await question('Tester la connexion √† la base de donn√©es? (o/n): ');
    if (testEnv.toLowerCase() === 'o') {
      executeCommand('npm run test-env', 'Test de la connexion');
    }

    // √âtape 7: D√©marrage du serveur de d√©veloppement
    console.log('\nüöÄ √âTAPE 7: D√©marrage du serveur de d√©veloppement');
    console.log('-' .repeat(40));
    
    const startDev = await question('D√©marrer le serveur de d√©veloppement? (o/n): ');
    if (startDev.toLowerCase() === 'o') {
      console.log('\nüåü D√©marrage du serveur...');
      console.log('Votre application sera disponible sur: http://localhost:3000');
      console.log('Appuyez sur Ctrl+C pour arr√™ter le serveur');
      executeCommand('npm run dev', 'D√©marrage du serveur de d√©veloppement');
    }

    // R√©capitulatif
    console.log('\nüéâ CONFIGURATION TERMIN√âE!');
    console.log('=' .repeat(60));
    console.log('‚úÖ Environnement de d√©veloppement configur√©');
    console.log('‚úÖ Base de donn√©es Supabase connect√©e');
    console.log('‚úÖ Variables d\'environnement configur√©es');
    
    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('1. Testez votre application sur http://localhost:3000');
    console.log('2. Configurez les environnements de test et production');
    console.log('3. Mettez en place le CI/CD avec GitHub Actions');
    
    console.log('\nüîß COMMANDES UTILES:');
    console.log('‚Ä¢ npm run dev          - D√©marrer le d√©veloppement');
    console.log('‚Ä¢ npm run test-env     - Tester la connexion DB');
    console.log('‚Ä¢ npm run health:check - V√©rifier la sant√© de l\'app');
    console.log('‚Ä¢ npm run build        - Builder l\'application');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
  } finally {
    rl.close();
  }
}

stepByStepGuide();