#!/usr/bin/env tsx
/**
 * SCRIPT DE D√âMARRAGE S√âCURIS√â
 * ============================
 * 
 * D√©marre l'application en g√©rant les erreurs de compilation
 */

import { execSync, spawn } from 'child_process'
import { existsSync, rmSync } from 'fs'

class SafeDevStarter {
  
  async startDevelopment(): Promise<void> {
    console.log('üöÄ D√âMARRAGE S√âCURIS√â DE L\'APPLICATION')
    console.log('='.repeat(50))

    try {
      // 1. Nettoyer l'environnement
      await this.cleanEnvironment()
      
      // 2. V√©rifier les d√©pendances
      await this.checkDependencies()
      
      // 3. Compiler et d√©marrer
      await this.startNextDev()
      
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marrage:', error)
      await this.showTroubleshooting()
    }
  }

  private async cleanEnvironment(): Promise<void> {
    console.log('\nüßπ Nettoyage de l\'environnement...')
    
    try {
      // Arr√™ter les processus Node.js existants
      try {
        execSync('taskkill /f /im node.exe', { stdio: 'pipe' })
        console.log('   ‚úÖ Processus Node.js arr√™t√©s')
      } catch (error) {
        console.log('   ‚ÑπÔ∏è Aucun processus Node.js √† arr√™ter')
      }

      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Supprimer .next
      if (existsSync('.next')) {
        rmSync('.next', { recursive: true, force: true })
        console.log('   ‚úÖ Cache .next supprim√©')
      }

      // Supprimer node_modules/.cache
      if (existsSync('node_modules/.cache')) {
        rmSync('node_modules/.cache', { recursive: true, force: true })
        console.log('   ‚úÖ Cache node_modules supprim√©')
      }

      // Nettoyer le cache npm
      execSync('npm cache clean --force', { stdio: 'pipe' })
      console.log('   ‚úÖ Cache npm nettoy√©')

    } catch (error) {
      console.log('   ‚ö†Ô∏è Nettoyage partiel effectu√©')
    }
  }

  private async checkDependencies(): Promise<void> {
    console.log('\nüì¶ V√©rification des d√©pendances...')
    
    try {
      // V√©rifier que les d√©pendances critiques sont install√©es
      const criticalDeps = ['next', 'react', 'react-dom']
      
      for (const dep of criticalDeps) {
        try {
          execSync(`npm list ${dep}`, { stdio: 'pipe' })
          console.log(`   ‚úÖ ${dep} install√©`)
        } catch (error) {
          console.log(`   ‚ùå ${dep} manquant - r√©installation...`)
          execSync(`npm install ${dep}`, { stdio: 'inherit' })
        }
      }

    } catch (error) {
      console.log('   ‚ö†Ô∏è Probl√®me avec les d√©pendances')
      throw error
    }
  }

  private async startNextDev(): Promise<void> {
    console.log('\nüöÄ D√©marrage du serveur Next.js...')
    console.log('üì± L\'application sera disponible sur http://localhost:3000')
    console.log('üìä Page des rapports : http://localhost:3000/reports')
    console.log('')
    console.log('‚è≥ Compilation en cours... (cela peut prendre quelques minutes)')
    console.log('')

    // D√©marrer Next.js avec gestion des erreurs
    const nextProcess = spawn('npm', ['run', 'dev'], {
      stdio: 'inherit',
      shell: true
    })

    // G√©rer les erreurs du processus
    nextProcess.on('error', (error) => {
      console.error('‚ùå Erreur lors du d√©marrage de Next.js:', error)
    })

    nextProcess.on('exit', (code) => {
      if (code !== 0) {
        console.error(`‚ùå Next.js s'est arr√™t√© avec le code ${code}`)
        this.showTroubleshooting()
      }
    })

    // Attendre que le processus d√©marre
    await new Promise(resolve => setTimeout(resolve, 5000))
    
    console.log('\n‚úÖ Serveur d√©marr√©!')
    console.log('üåê Ouvrez http://localhost:3000 dans votre navigateur')
  }

  private async showTroubleshooting(): Promise<void> {
    console.log('\nüõ†Ô∏è GUIDE DE D√âPANNAGE')
    console.log('='.repeat(30))
    console.log('')
    console.log('Si l\'application ne d√©marre pas:')
    console.log('')
    console.log('1. V√©rifiez Node.js:')
    console.log('   node --version  (doit √™tre >= 18.0.0)')
    console.log('')
    console.log('2. R√©installez les d√©pendances:')
    console.log('   rmdir /s /q node_modules')
    console.log('   del package-lock.json')
    console.log('   npm install')
    console.log('')
    console.log('3. Red√©marrez votre terminal/IDE')
    console.log('')
    console.log('4. Essayez en mode debug:')
    console.log('   set DEBUG=* && npm run dev')
    console.log('')
    console.log('5. V√©rifiez les ports:')
    console.log('   netstat -ano | findstr :3000')
    console.log('')
  }
}

async function main() {
  const starter = new SafeDevStarter()
  await starter.startDevelopment()
}

main().catch(console.error)