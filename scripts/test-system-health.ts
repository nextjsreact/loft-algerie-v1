#!/usr/bin/env tsx
/**
 * SCRIPT DE TEST DE SANT√â DU SYST√àME
 * ==================================
 * 
 * V√©rifie que tous les composants fonctionnent correctement
 */

import { execSync } from 'child_process'
import { existsSync } from 'fs'

class SystemHealthChecker {
  
  async runHealthCheck(): Promise<void> {
    console.log('üè• TEST DE SANT√â DU SYST√àME')
    console.log('='.repeat(50))

    const results = {
      environment: await this.checkEnvironment(),
      dependencies: await this.checkDependencies(),
      configuration: await this.checkConfiguration(),
      database: await this.checkDatabase(),
      reports: await this.checkReports()
    }

    this.displayResults(results)
  }

  private async checkEnvironment(): Promise<{ status: string, details: string[] }> {
    console.log('\nüåç V√©rification de l\'environnement...')
    const details: string[] = []
    
    try {
      // V√©rifier Node.js
      const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim()
      details.push(`Node.js: ${nodeVersion}`)
      
      // V√©rifier npm
      const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim()
      details.push(`npm: ${npmVersion}`)
      
      // V√©rifier le syst√®me
      const platform = process.platform
      details.push(`Plateforme: ${platform}`)
      
      console.log('   ‚úÖ Environnement OK')
      return { status: 'success', details }
      
    } catch (error) {
      console.log('   ‚ùå Probl√®me environnement')
      details.push(`Erreur: ${error}`)
      return { status: 'error', details }
    }
  }

  private async checkDependencies(): Promise<{ status: string, details: string[] }> {
    console.log('\nüì¶ V√©rification des d√©pendances...')
    const details: string[] = []
    
    try {
      // V√©rifier les d√©pendances critiques
      const criticalDeps = ['next', 'react', 'react-dom', 'jspdf', '@supabase/supabase-js']
      
      for (const dep of criticalDeps) {
        try {
          const version = execSync(`npm list ${dep} --depth=0`, { encoding: 'utf8' })
          const match = version.match(new RegExp(`${dep}@([\\d\\.]+)`))
          if (match) {
            details.push(`${dep}: ${match[1]}`)
          }
        } catch (error) {
          details.push(`${dep}: NON INSTALL√â`)
        }
      }
      
      console.log('   ‚úÖ D√©pendances v√©rifi√©es')
      return { status: 'success', details }
      
    } catch (error) {
      console.log('   ‚ùå Probl√®me d√©pendances')
      details.push(`Erreur: ${error}`)
      return { status: 'error', details }
    }
  }

  private async checkConfiguration(): Promise<{ status: string, details: string[] }> {
    console.log('\n‚öôÔ∏è V√©rification de la configuration...')
    const details: string[] = []
    
    try {
      // V√©rifier les fichiers de configuration
      const configFiles = [
        'package.json',
        'next.config.mjs',
        'tsconfig.json',
        '.env.local'
      ]
      
      for (const file of configFiles) {
        if (existsSync(file)) {
          details.push(`${file}: ‚úÖ`)
        } else {
          details.push(`${file}: ‚ùå MANQUANT`)
        }
      }
      
      // V√©rifier les dossiers importants
      const importantDirs = [
        'components/reports',
        'lib',
        'hooks',
        'app/reports'
      ]
      
      for (const dir of importantDirs) {
        if (existsSync(dir)) {
          details.push(`${dir}/: ‚úÖ`)
        } else {
          details.push(`${dir}/: ‚ùå MANQUANT`)
        }
      }
      
      console.log('   ‚úÖ Configuration v√©rifi√©e')
      return { status: 'success', details }
      
    } catch (error) {
      console.log('   ‚ùå Probl√®me configuration')
      details.push(`Erreur: ${error}`)
      return { status: 'error', details }
    }
  }

  private async checkDatabase(): Promise<{ status: string, details: string[] }> {
    console.log('\nüóÑÔ∏è V√©rification de la base de donn√©es...')
    const details: string[] = []
    
    try {
      // V√©rifier les fichiers d'environnement
      const envFiles = ['.env.local', '.env.development', '.env.production', '.env.test']
      let hasEnvFile = false
      
      for (const file of envFiles) {
        if (existsSync(file)) {
          details.push(`${file}: ‚úÖ`)
          hasEnvFile = true
        }
      }
      
      if (!hasEnvFile) {
        details.push('Aucun fichier .env trouv√©')
        console.log('   ‚ö†Ô∏è Aucun fichier d\'environnement')
        return { status: 'warning', details }
      }
      
      console.log('   ‚úÖ Configuration DB pr√©sente')
      return { status: 'success', details }
      
    } catch (error) {
      console.log('   ‚ùå Probl√®me base de donn√©es')
      details.push(`Erreur: ${error}`)
      return { status: 'error', details }
    }
  }

  private async checkReports(): Promise<{ status: string, details: string[] }> {
    console.log('\nüìä V√©rification du syst√®me de rapports...')
    const details: string[] = []
    
    try {
      // V√©rifier les fichiers de rapports
      const reportFiles = [
        'lib/pdf-generator.ts',
        'hooks/use-reports.ts',
        'components/reports/report-generator.tsx',
        'app/reports/page.tsx'
      ]
      
      let allFilesPresent = true
      
      for (const file of reportFiles) {
        if (existsSync(file)) {
          details.push(`${file}: ‚úÖ`)
        } else {
          details.push(`${file}: ‚ùå MANQUANT`)
          allFilesPresent = false
        }
      }
      
      if (!allFilesPresent) {
        console.log('   ‚ùå Fichiers de rapports manquants')
        return { status: 'error', details }
      }
      
      // Tester la g√©n√©ration PDF
      try {
        console.log('   üß™ Test de g√©n√©ration PDF...')
        execSync('npm run reports:test', { stdio: 'pipe' })
        details.push('Test PDF: ‚úÖ R√âUSSI')
        console.log('   ‚úÖ Syst√®me de rapports fonctionnel')
        return { status: 'success', details }
        
      } catch (error) {
        details.push('Test PDF: ‚ùå √âCHEC')
        console.log('   ‚ö†Ô∏è Probl√®me g√©n√©ration PDF')
        return { status: 'warning', details }
      }
      
    } catch (error) {
      console.log('   ‚ùå Erreur syst√®me de rapports')
      details.push(`Erreur: ${error}`)
      return { status: 'error', details }
    }
  }

  private displayResults(results: any): void {
    console.log('\nüìã R√âSULTATS DU TEST DE SANT√â')
    console.log('='.repeat(50))

    let overallStatus = 'success'
    let totalChecks = 0
    let successfulChecks = 0

    for (const [category, result] of Object.entries(results)) {
      totalChecks++
      
      const status = (result as any).status
      const details = (result as any).details
      
      let icon = '‚úÖ'
      if (status === 'warning') {
        icon = '‚ö†Ô∏è'
        if (overallStatus === 'success') overallStatus = 'warning'
      } else if (status === 'error') {
        icon = '‚ùå'
        overallStatus = 'error'
      } else {
        successfulChecks++
      }
      
      console.log(`\n${icon} ${category.toUpperCase()}:`)
      details.forEach((detail: string) => {
        console.log(`   ${detail}`)
      })
    }

    // R√©sum√© final
    console.log('\nüìä R√âSUM√â FINAL')
    console.log('='.repeat(30))
    console.log(`Tests r√©ussis: ${successfulChecks}/${totalChecks}`)
    console.log(`Taux de r√©ussite: ${Math.round(successfulChecks / totalChecks * 100)}%`)

    if (overallStatus === 'success') {
      console.log('\nüéâ SYST√àME EN PARFAIT √âTAT!')
      console.log('‚úÖ Tous les composants fonctionnent correctement')
      console.log('üöÄ Vous pouvez utiliser l\'application en toute s√©curit√©')
      
    } else if (overallStatus === 'warning') {
      console.log('\n‚ö†Ô∏è SYST√àME FONCTIONNEL AVEC AVERTISSEMENTS')
      console.log('üí° Certains composants peuvent n√©cessiter une attention')
      console.log('üîß Consultez les d√©tails ci-dessus pour les corrections')
      
    } else {
      console.log('\n‚ùå PROBL√àMES D√âTECT√âS')
      console.log('üõ†Ô∏è Des corrections sont n√©cessaires avant utilisation')
      console.log('üìã Suivez le guide de d√©pannage: GUIDE_DEPANNAGE_WEBPACK.md')
    }

    // Actions recommand√©es
    console.log('\nüéØ ACTIONS RECOMMAND√âES:')
    
    if (overallStatus === 'error') {
      console.log('1. Ex√©cutez: npm run fix:webpack')
      console.log('2. Red√©marrez: npm run dev:clean')
      console.log('3. Relancez ce test: npm run health:check')
    } else if (overallStatus === 'warning') {
      console.log('1. V√©rifiez les avertissements ci-dessus')
      console.log('2. Configurez les fichiers manquants si n√©cessaire')
      console.log('3. Testez l\'application: npm run dev')
    } else {
      console.log('1. Lancez l\'application: npm run dev')
      console.log('2. Testez les rapports: naviguez vers /reports')
      console.log('3. Profitez de votre syst√®me fonctionnel! üéâ')
    }
  }
}

async function main() {
  const checker = new SystemHealthChecker()
  await checker.runHealthCheck()
}

main().catch(console.error)