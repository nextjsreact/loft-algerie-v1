#!/usr/bin/env tsx
/**
 * Workflow quotidien de clonage et v√©rification
 * Combine clonage + v√©rification + rapport
 */

import { DataCloner } from './clone-data'

async function dailyWorkflow() {
  const args = process.argv.slice(2)
  const targetEnv = args[0] || 'test'
  
  if (!['test', 'dev'].includes(targetEnv)) {
    console.log('‚ùå Environnement cible non valide. Utilisez: test ou dev')
    return
  }

  console.log('üöÄ WORKFLOW QUOTIDIEN DE CLONAGE')
  console.log('=' .repeat(50))
  console.log(`üìÖ ${new Date().toLocaleDateString('fr-FR')}`)
  console.log(`üéØ Cible: ${targetEnv.toUpperCase()}`)
  console.log('')

  // √âtape 1: Confirmation
  const { createInterface } = await import('readline')
  const rl = createInterface({
    input: process.stdin,
    output: process.stdout
  })

  console.log(`‚ö†Ô∏è Cette op√©ration va remplacer toutes les donn√©es de ${targetEnv.toUpperCase()}`)
  const confirm = await new Promise(resolve => {
    rl.question('Continuer? (tapez OUI): ', resolve)
  })
  rl.close()

  if (confirm !== 'OUI') {
    console.log('‚ùå Op√©ration annul√©e')
    return
  }

  try {
    // √âtape 2: Clonage
    console.log('\nüìã √âTAPE 1: CLONAGE DES DONN√âES')
    console.log('-' .repeat(40))
    
    const cloner = new DataCloner({
      source: 'prod',
      target: targetEnv as 'test' | 'dev',
      excludeSensitive: true,
      dryRun: false
    })

    await cloner.cloneData()

    // √âtape 3: V√©rification automatique
    console.log('\nüîç √âTAPE 2: V√âRIFICATION AUTOMATIQUE')
    console.log('-' .repeat(40))
    
    await cloner.verifyClone()

    // √âtape 4: Rapport final
    console.log('\nüìä √âTAPE 3: RAPPORT FINAL')
    console.log('-' .repeat(40))
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const reportFile = `./logs/clone-report-${targetEnv}-${timestamp}.md`
    
    const report = `# Rapport de Clonage Quotidien

**Date:** ${new Date().toLocaleString('fr-FR')}
**Source:** PRODUCTION
**Cible:** ${targetEnv.toUpperCase()}
**Status:** ‚úÖ R√âUSSI

## Actions effectu√©es
- ‚úÖ Clonage des donn√©es de configuration
- ‚úÖ Clonage des donn√©es de base (lofts, propri√©taires)
- ‚úÖ Exclusion des donn√©es sensibles
- ‚úÖ Cr√©ation automatique des utilisateurs de test
- ‚úÖ V√©rification post-clonage

## Utilisateurs de test cr√©√©s
- admin@test.local (Admin)
- manager@test.local (Manager)
- user@test.local (Utilisateur)
- **Mot de passe:** test123

## Prochaines √©tapes
1. Testez la connexion: \`npm run env:switch:${targetEnv}\`
2. Lancez l'application: \`npm run dev\`
3. V√©rifiez vos fonctionnalit√©s sp√©cifiques
4. Testez les colonnes TV avec vos scripts SQL

## Commandes utiles
\`\`\`bash
# V√©rifier l'environnement
npm run verify:${targetEnv}

# Basculer vers l'environnement
npm run env:switch:${targetEnv}

# V√©rifier les colonnes TV (vos scripts SQL)
# Utilisez vos scripts dans le dossier scripts/
\`\`\`
`

    // Cr√©er le dossier logs s'il n'existe pas
    const fs = await import('fs')
    if (!fs.existsSync('./logs')) {
      fs.mkdirSync('./logs', { recursive: true })
    }

    fs.writeFileSync(reportFile, report)
    
    console.log('‚úÖ Rapport g√©n√©r√©:', reportFile)
    console.log('')
    console.log('üéâ WORKFLOW TERMIN√â AVEC SUCC√àS!')
    console.log('=' .repeat(50))
    console.log(`üîê Connexion ${targetEnv}: admin@test.local / test123`)
    console.log(`üìã Rapport: ${reportFile}`)
    console.log(`üöÄ Commande suivante: npm run env:switch:${targetEnv} && npm run dev`)

  } catch (error) {
    console.log('‚ùå ERREUR DURANT LE WORKFLOW:', error)
    
    // Rapport d'erreur
    const errorReport = `# Rapport d'Erreur - Clonage

**Date:** ${new Date().toLocaleString('fr-FR')}
**Cible:** ${targetEnv.toUpperCase()}
**Status:** ‚ùå √âCHEC

## Erreur
\`\`\`
${error}
\`\`\`

## Actions recommand√©es
1. V√©rifiez la connexion aux bases de donn√©es
2. V√©rifiez les fichiers .env.${targetEnv}
3. Relancez le workflow: \`npm run daily:clone:${targetEnv}\`
`

    const fs = await import('fs')
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const errorFile = `./logs/clone-error-${targetEnv}-${timestamp}.md`
    
    if (!fs.existsSync('./logs')) {
      fs.mkdirSync('./logs', { recursive: true })
    }
    
    fs.writeFileSync(errorFile, errorReport)
    console.log('üìã Rapport d\'erreur:', errorFile)
  }
}

dailyWorkflow().catch(console.error)