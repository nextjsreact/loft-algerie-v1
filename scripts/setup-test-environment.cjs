#!/usr/bin/env node
/**
 * Script de configuration de l'environnement de test
 * Ce script vous guide dans la cr√©ation de l'environnement de test
 */

const fs = require('fs');
const readline = require('readline');
const { execSync } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

function executeCommand(command, description) {
  console.log(`\nüîÑ ${description}...`);
  console.log(`Commande: ${command}`);
  try {
    execSync(command, { stdio: 'inherit' });
    console.log('‚úÖ Termin√©!');
    return true;
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
    return false;
  }
}

async function setupTestEnvironment() {
  console.log('üß™ CONFIGURATION DE L\'ENVIRONNEMENT DE TEST');
  console.log('=' .repeat(60));
  console.log('Ce script vous aide √† cr√©er un environnement de test s√©par√©.\n');

  try {
    // √âtape 1: V√©rification des pr√©requis
    console.log('üìã √âTAPE 1: V√©rification de l\'environnement de d√©veloppement');
    console.log('-' .repeat(50));
    
    if (!fs.existsSync('.env.local')) {
      console.log('‚ùå Environnement de d√©veloppement non configur√©');
      console.log('üí° Configurez d\'abord votre environnement de d√©veloppement avec: npm run setup:guide');
      return;
    }
    
    console.log('‚úÖ Environnement de d√©veloppement d√©tect√©');

    // √âtape 2: Cr√©ation du projet Supabase de test
    console.log('\nüóÑÔ∏è √âTAPE 2: Configuration du projet Supabase de test');
    console.log('-' .repeat(50));
    
    console.log('üìù Instructions pour cr√©er le projet Supabase de test:');
    console.log('1. Allez sur https://supabase.com/dashboard');
    console.log('2. Cliquez sur "New project"');
    console.log('3. Nommez votre projet: "loft-algerie-test"');
    console.log('4. Choisissez la r√©gion: "Europe West (Ireland)"');
    console.log('5. Cr√©ez le projet');
    console.log('6. Attendez que le projet soit compl√®tement initialis√©');
    
    await question('Appuyez sur Entr√©e quand votre projet de test est cr√©√©...');

    // √âtape 3: Collecte des informations Supabase de test
    console.log('\nüîë √âTAPE 3: Configuration des cl√©s Supabase de test');
    console.log('-' .repeat(50));
    console.log('Dans votre dashboard Supabase du projet TEST, allez dans Settings > API');
    
    const testSupabaseUrl = await question('URL du projet TEST (Project URL): ');
    const testAnonKey = await question('Cl√© anonyme TEST (anon/public): ');
    const testServiceRoleKey = await question('Cl√© service_role TEST: ');

    // √âtape 4: G√©n√©ration du fichier .env.test
    console.log('\n‚öôÔ∏è √âTAPE 4: G√©n√©ration du fichier .env.test');
    console.log('-' .repeat(50));

    const testAuthSecret = require('crypto').randomBytes(32).toString('hex');
    
    const testEnvContent = `# ===========================================
# ENVIRONNEMENT DE TEST/STAGING
# ===========================================
# G√©n√©r√© automatiquement le ${new Date().toLocaleString()}

# Base de donn√©es Supabase - Test
NEXT_PUBLIC_SUPABASE_URL=${testSupabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${testAnonKey}
SUPABASE_SERVICE_ROLE_KEY="${testServiceRoleKey}"

# Authentication
AUTH_SECRET=${testAuthSecret}

# Application
NEXT_PUBLIC_APP_URL=https://test-loft-algerie.vercel.app
NODE_ENV=test

# Logging et Debug
NEXT_PUBLIC_DEBUG_MODE=false
LOG_LEVEL=info

# Email (service de test - Mailtrap recommand√©)
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=[VOTRE_MAILTRAP_USER]
SMTP_PASS=[VOTRE_MAILTRAP_PASS]
SMTP_FROM=test@loft-algerie.com

# Monitoring et Analytics (limit√©s)
NEXT_PUBLIC_ANALYTICS_ENABLED=true
SENTRY_DSN=[VOTRE_TEST_SENTRY_DSN]

# Cache et Performance
REDIS_URL=[VOTRE_TEST_REDIS_URL]
ENABLE_CACHE=true

# Tests automatis√©s
ENABLE_E2E_TESTS=true
PLAYWRIGHT_BASE_URL=https://test-loft-algerie.vercel.app

# Notifications temps r√©el
NEXT_PUBLIC_REALTIME_ENABLED=true

# Base de donn√©es
NEXT_PUBLIC_HAS_DB=true
`;

    fs.writeFileSync('.env.test', testEnvContent);
    console.log('‚úÖ Fichier .env.test cr√©√©!');

    // √âtape 5: Application du sch√©ma de base de donn√©es
    console.log('\nüìä √âTAPE 5: Application du sch√©ma de base de donn√©es de test');
    console.log('-' .repeat(50));
    
    console.log('üìù Instructions pour appliquer le sch√©ma:');
    console.log('1. Ouvrez votre dashboard Supabase du projet TEST');
    console.log('2. Allez dans "SQL Editor"');
    console.log('3. Cliquez sur "New query"');
    console.log('4. Copiez tout le contenu du fichier scripts/schema-supabase-safe.sql');
    console.log('5. Collez-le dans l\'√©diteur et cliquez sur "Run"');
    console.log('6. V√©rifiez qu\'il n\'y a pas d\'erreurs');
    
    await question('Appuyez sur Entr√©e quand le sch√©ma de test est appliqu√©...');

    // √âtape 6: Configuration des donn√©es de test
    console.log('\nüå± √âTAPE 6: Insertion des donn√©es de test');
    console.log('-' .repeat(50));
    
    const addTestData = await question('Voulez-vous ajouter des donn√©es de test? (o/n): ');
    if (addTestData.toLowerCase() === 'o') {
      console.log('üìù Instructions pour les donn√©es de test:');
      console.log('1. Dans votre √©diteur SQL Supabase du projet TEST');
      console.log('2. Copiez et ex√©cutez le contenu du fichier scripts/seed-test-data.sql');
      console.log('3. Cela cr√©era des lofts, propri√©taires et donn√©es d\'exemple');
      
      await question('Appuyez sur Entr√©e quand les donn√©es de test sont ajout√©es...');
    }

    // √âtape 7: Test de l'environnement
    console.log('\nüß™ √âTAPE 7: Test de l\'environnement de test');
    console.log('-' .repeat(50));
    
    const testEnv = await question('Tester la connexion √† la base de donn√©es de test? (o/n): ');
    if (testEnv.toLowerCase() === 'o') {
      console.log('üîÑ Basculement vers l\'environnement de test...');
      
      // Sauvegarder l'environnement actuel
      if (fs.existsSync('.env.local')) {
        fs.copyFileSync('.env.local', '.env.local.backup');
        console.log('üíæ Environnement de d√©veloppement sauvegard√©');
      }
      
      // Basculer vers test
      fs.copyFileSync('.env.test', '.env.local');
      console.log('üîÑ Bascul√© vers l\'environnement de test');
      
      // Tester
      const testResult = executeCommand('npm run test-env', 'Test de la connexion de test');
      
      if (testResult) {
        console.log('‚úÖ Environnement de test fonctionnel!');
      } else {
        console.log('‚ùå Probl√®me avec l\'environnement de test');
      }
      
      // Restaurer l'environnement de d√©veloppement
      if (fs.existsSync('.env.local.backup')) {
        fs.copyFileSync('.env.local.backup', '.env.local');
        fs.unlinkSync('.env.local.backup');
        console.log('üîÑ Environnement de d√©veloppement restaur√©');
      }
    }

    // √âtape 8: Configuration du d√©ploiement
    console.log('\nüöÄ √âTAPE 8: Configuration du d√©ploiement automatique');
    console.log('-' .repeat(50));
    
    const setupDeploy = await question('Configurer le d√©ploiement automatique sur Vercel? (o/n): ');
    if (setupDeploy.toLowerCase() === 'o') {
      console.log('üìù Instructions pour Vercel:');
      console.log('1. Allez sur https://vercel.com/dashboard');
      console.log('2. Importez votre projet GitHub');
      console.log('3. Configurez les variables d\'environnement depuis .env.test');
      console.log('4. Configurez le d√©ploiement automatique sur la branche "staging"');
      console.log('5. Votre URL de test sera: https://test-loft-algerie.vercel.app');
    }

    // R√©capitulatif
    console.log('\nüéâ CONFIGURATION DE L\'ENVIRONNEMENT DE TEST TERMIN√âE!');
    console.log('=' .repeat(60));
    console.log('‚úÖ Projet Supabase de test cr√©√©');
    console.log('‚úÖ Fichier .env.test configur√©');
    console.log('‚úÖ Sch√©ma de base de donn√©es appliqu√©');
    console.log('‚úÖ Variables d\'environnement configur√©es');
    
    console.log('\nüìã COMMANDES UTILES:');
    console.log('‚Ä¢ npm run env:switch:test  - Basculer vers l\'environnement de test');
    console.log('‚Ä¢ npm run env:switch:dev   - Retourner au d√©veloppement');
    console.log('‚Ä¢ npm run test-env         - Tester la connexion');
    console.log('‚Ä¢ npm run deploy:test      - D√©ployer en test');
    
    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Testez localement avec: npm run env:switch:test && npm run dev');
    console.log('2. Configurez le d√©ploiement sur Vercel');
    console.log('3. Mettez en place les tests automatis√©s');
    console.log('4. Configurez l\'environnement de production quand vous serez pr√™t');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
  } finally {
    rl.close();
  }
}

setupTestEnvironment();