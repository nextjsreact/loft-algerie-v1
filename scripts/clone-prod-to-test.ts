#!/usr/bin/env tsx
/**
 * Script sp√©cialis√©: Clonage Production ‚Üí Test
 * Clone les donn√©es de production vers l'environnement de test
 */

import { DataCloner } from './clone-data'

async function cloneProdToTest() {
  console.log('üöÄ CLONAGE PRODUCTION ‚Üí TEST')
  console.log('=' .repeat(50))
  console.log('Ce script clone les donn√©es de production vers l\'environnement de test.')
  console.log('‚ö†Ô∏è Les donn√©es existantes en test seront remplac√©es.\n')

  // Confirmation de s√©curit√©
  const { createInterface } = await import('readline')
  const rl = createInterface({
    input: process.stdin,
    output: process.stdout
  })

  const confirm = await new Promise(resolve => {
    rl.question('√ätes-vous s√ªr de vouloir remplacer les donn√©es de test? (tapez OUI): ', resolve)
  })

  rl.close()

  if (confirm !== 'OUI') {
    console.log('‚ùå Op√©ration annul√©e')
    return
  }

  const cloner = new DataCloner({
    source: 'prod',
    target: 'test',
    excludeSensitive: false, // Inclure TOUTES les donn√©es (avec anonymisation)
    dryRun: false
  })

  await cloner.cloneData()
  
  // V√©rification automatique post-clonage
  console.log('\nüîç V√©rification automatique...')
  await cloner.verifyClone()
  
  console.log('\nüéØ RECOMMANDATIONS POST-CLONAGE:')
  console.log('‚Ä¢ Testez la connexion: npm run env:switch:test && npm run dev')
  console.log('‚Ä¢ V√©rifiez vos colonnes TV: Utilisez vos scripts SQL de v√©rification')
  console.log('‚Ä¢ TOUTES les donn√©es ont √©t√© clon√©es avec anonymisation')
  console.log('‚Ä¢ Mot de passe universel pour TEST: test123')
  console.log('‚Ä¢ Tous les utilisateurs peuvent se connecter avec: test123')
}

cloneProdToTest().catch(console.error)