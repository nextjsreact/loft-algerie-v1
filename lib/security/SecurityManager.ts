/**
 * SecurityManager - Gestionnaire de s√©curit√© pour les op√©rations critiques
 * Impl√©mente la protection de la production avec double confirmation
 */

export interface SecurityValidation {
  isValid: boolean
  message: string
  requiresBackup: boolean
}

export interface ConfirmationOptions {
  operation: string
  environment: string
  consequences: string[]
  keyword: string
}

export class SecurityManager {
  private static readonly PRODUCTION_KEYWORDS = ['PRODUCTION', 'PROD'];
  private static readonly CONFIRMATION_KEYWORDS = ['CONFIRMER', 'CONFIRM'];

  /**
   * Valide l'acc√®s aux op√©rations de production
   */
  async validateProductionAccess(operation: string, targetEnv: string): Promise<SecurityValidation> {
    const isProduction = this.isProductionEnvironment(targetEnv);
    
    if (!isProduction) {
      return {
        isValid: true,
        message: `Op√©ration autoris√©e sur l'environnement ${targetEnv}`,
        requiresBackup: false
      };
    }

    // Production d√©tect√©e - protection maximale
    console.log('\nüö® ALERTE S√âCURIT√â - ENVIRONNEMENT DE PRODUCTION D√âTECT√â');
    console.log('=' .repeat(60));
    console.log(`üéØ Op√©ration: ${operation}`);
    console.log(`üè≠ Environnement: ${targetEnv.toUpperCase()}`);
    console.log('‚ö†Ô∏è  CETTE OP√âRATION AFFECTERA LA PRODUCTION!');
    
    return {
      isValid: false, // N√©cessite confirmation suppl√©mentaire
      message: 'Op√©ration de production d√©tect√©e - confirmation requise',
      requiresBackup: true
    };
  }

  /**
   * Demande une double confirmation avec mot-cl√© sp√©cifique
   */
  async requestDoubleConfirmation(options: ConfirmationOptions): Promise<boolean> {
    const { createInterface } = await import('readline');
    const rl = createInterface({
      input: process.stdin,
      output: process.stdout
    });

    try {
      // Affichage de l'avertissement de s√©curit√©
      this.displaySecurityWarning(options.environment, options.operation, options.consequences);

      // Premi√®re confirmation
      const firstConfirm = await new Promise<string>(resolve => {
        rl.question('\n‚ùì Voulez-vous vraiment continuer? (tapez OUI): ', resolve);
      });

      if (firstConfirm !== 'OUI') {
        console.log('‚ùå Op√©ration annul√©e par l\'utilisateur');
        return false;
      }

      // Deuxi√®me confirmation avec mot-cl√©
      const keywordConfirm = await new Promise<string>(resolve => {
        rl.question(`\nüîê Pour confirmer, tapez "${options.keyword}" en majuscules: `, resolve);
      });

      if (keywordConfirm !== options.keyword) {
        console.log(`‚ùå Mot-cl√© incorrect. Attendu: "${options.keyword}", Re√ßu: "${keywordConfirm}"`);
        console.log('üõ°Ô∏è Op√©ration annul√©e pour s√©curit√©');
        return false;
      }

      console.log('‚úÖ Double confirmation valid√©e');
      return true;

    } finally {
      rl.close();
    }
  }

  /**
   * Affiche un avertissement de s√©curit√© visuel
   */
  displaySecurityWarning(environment: string, operation: string, consequences: string[]): void {
    const isProduction = this.isProductionEnvironment(environment);
    
    if (isProduction) {
      console.log('\nüî¥üî¥üî¥ DANGER - ENVIRONNEMENT DE PRODUCTION üî¥üî¥üî¥');
      console.log('‚ñà'.repeat(60));
      console.log('‚ñà                    ‚ö†Ô∏è  ATTENTION  ‚ö†Ô∏è                     ‚ñà');
      console.log('‚ñà                                                        ‚ñà');
      console.log(`‚ñà  Op√©ration: ${operation.padEnd(42)} ‚ñà`);
      console.log(`‚ñà  Environnement: ${environment.toUpperCase().padEnd(38)} ‚ñà`);
      console.log('‚ñà                                                        ‚ñà');
      console.log('‚ñà  CONS√âQUENCES DE CETTE OP√âRATION:                     ‚ñà');
      consequences.forEach(consequence => {
        console.log(`‚ñà  ‚Ä¢ ${consequence.padEnd(49)} ‚ñà`);
      });
      console.log('‚ñà                                                        ‚ñà');
      console.log('‚ñà  ‚ö†Ô∏è  CETTE ACTION EST IRR√âVERSIBLE  ‚ö†Ô∏è                  ‚ñà');
      console.log('‚ñà'.repeat(60));
    } else {
      console.log(`\nüü° Op√©ration sur l'environnement: ${environment.toUpperCase()}`);
      console.log(`üìã Action: ${operation}`);
      console.log('üìù Cons√©quences:');
      consequences.forEach(consequence => {
        console.log(`   ‚Ä¢ ${consequence}`);
      });
    }
  }

  /**
   * V√©rifie si un environnement est consid√©r√© comme production
   */
  private isProductionEnvironment(environment: string): boolean {
    const env = environment.toLowerCase();
    return env.includes('prod') || env.includes('production');
  }

  /**
   * Valide un mot-cl√© de confirmation
   */
  validateConfirmationKeyword(keyword: string, expectedType: 'production' | 'general'): boolean {
    const upperKeyword = keyword.toUpperCase();
    
    if (expectedType === 'production') {
      return SecurityManager.PRODUCTION_KEYWORDS.includes(upperKeyword);
    } else {
      return SecurityManager.CONFIRMATION_KEYWORDS.includes(upperKeyword);
    }
  }

  /**
   * G√©n√®re un ID unique pour l'op√©ration (pour audit)
   */
  generateOperationId(): string {
    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Cr√©e un r√©sum√© de s√©curit√© pour l'audit
   */
  createSecuritySummary(operation: string, environment: string, confirmed: boolean): object {
    return {
      timestamp: new Date().toISOString(),
      operation,
      environment,
      isProduction: this.isProductionEnvironment(environment),
      confirmed,
      securityLevel: this.isProductionEnvironment(environment) ? 'CRITICAL' : 'STANDARD',
      operationId: this.generateOperationId()
    };
  }
}